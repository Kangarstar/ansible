---
- name: Initialize Docker Swarm
  hosts: [swarm]
  become: true

  tasks:
    - name: Ensure Docker is started and enabled
      service:
        name: docker
        state: started
        enabled: true

    - name: Ensure User is in Docker group
      user:
        name: "{{ admin_user }}"
        groups: docker
        append: true

    - name: Reset SSH connection to apply new group
      meta: reset_connection

- name: Initialize the first manager
  hosts: swarm[0]
  become: true
  tasks:
    - name: Check if Docker Swarm is already initialized
      command: docker info --format '{% raw %}{{.Swarm.LocalNodeState}}{% endraw %}'
      register: swarm_state
      changed_when: false

    - name: Initialize Docker Swarm
      docker_swarm:
        state: present
        advertise_addr: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
      register: swarm_init
      when: swarm_state.stdout != "active"


    - name: Get manager join token
      command: docker swarm join-token -q manager
      register: manager_token
      changed_when: false

    - name: Get worker join token
      command: docker swarm join-token -q worker
      register: worker_token
      changed_when: false

    - name: Set facts for swarm info
      set_fact:
        manager_token: "{{ manager_token.stdout }}"
        worker_token: "{{ worker_token.stdout }}"
        manager_ip: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"

- name: Join additional managers to the swarm
  hosts: swarm_managers[1:]
  become: true
  tasks:
    - name: Check if Docker Swarm is already initialized
      command: docker info --format '{% raw %}{{.Swarm.LocalNodeState}}{% endraw %}'
      register: swarm_state
      changed_when: false

    - name: Join swarm as a manager
      docker_swarm:
        state: join
        advertise_addr: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
        join_token: "{{ hostvars[groups['swarm_managers'][0]]['manager_token'] }}"
        remote_addrs: ["{{ hostvars[groups['swarm_managers'][0]]['manager_ip'] }}:2377"]
      when: swarm_info.swarm.LocalNodeState is not defined or not swarm_info.swarm.ControlAvailable | default(false)

- name: Join workers to the swarm
  hosts: swarm_workers
  become: true
  tasks:
    - name: Check if Docker Swarm is already initialized
      command: docker info --format '{% raw %}{{.Swarm.LocalNodeState}}{% endraw %}'
      register: swarm_state
      changed_when: false

    - name: Join swarm as a worker
      docker_swarm:
        state: join
        advertise_addr: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
        join_token: "{{ hostvars[groups['swarm_managers'][0]]['worker_token'] }}"
        remote_addrs: ["{{ hostvars[groups['swarm_managers'][0]]['manager_ip'] }}:2377"]
      when: swarm_info.swarm.LocalNodeState is not defined or swarm_info.swarm.LocalNodeState != "active"

- name: Verify swarm setup
  hosts: swarm_managers[0]
  become: true
  tasks:
    - name: Get swarm nodes
      docker_node_info:
      register: node_info

    - name: Count manager and worker nodes
      set_fact:
        manager_count: "{{ node_info.nodes | selectattr('Spec.Role', 'equalto', 'manager') | list | length }}"
        worker_count: "{{ node_info.nodes | selectattr('Spec.Role', 'equalto', 'worker') | list | length }}"

    - name: Show concise swarm status
      debug:
        msg: >-
          Docker Swarm is up with {{ manager_count }} manager(s) and {{ worker_count }} worker(s).

---
- name: Check if MicroCeph is already bootstrapped
  command: microceph status
  register: microceph_status
  changed_when: false
  failed_when: false
  delegate_to: "{{ groups['swarm'][0] }}"
  run_once: true

- name: Set flag if MicroCeph is already bootstrapped
  set_fact:
    microceph_already_bootstrapped: "{{ 'MicroCeph deployment summary' in microceph_status.stdout }}"
  run_once: true


- name: Bootstrap and join MicroCeph cluster (only if not bootstrapped)
  when: not microceph_already_bootstrapped
  block:

    - name: Bootstrap MicroCeph on primary node
      command: microceph cluster bootstrap
      delegate_to: "{{ groups['swarm'][0] }}"
      run_once: true
      register: bootstrap_result
      failed_when:
        - bootstrap_result.rc != 0
        - "'Database is online' not in bootstrap_result.stderr"
      changed_when: "'Database is online' not in bootstrap_result.stderr"

    - name: Initialize node_tokens and primary_node_ip facts
      set_fact:
        node_tokens: {}
        primary_node_ip: "{{ ansible_default_ipv4.address }}"
      when: inventory_hostname == groups['swarm'][0]

    - name: Generate join tokens for secondary nodes
      command: microceph cluster add {{ hostvars[item]['ansible_hostname'] }}
      loop: "{{ groups['swarm'][1:] }}"
      register: tokens
      delegate_to: "{{ groups['swarm'][0] }}"
      run_once: true
      changed_when: false
      failed_when: false

    - name: Store tokens for secondary nodes
      set_fact:
        node_tokens: "{{ node_tokens | combine({hostvars[item.item]['ansible_hostname']: item.stdout}) }}"
      loop: "{{ tokens.results }}"
      when: item.rc == 0 and 'UNIQUE constraint failed' not in item.stderr
      delegate_to: "{{ groups['swarm'][0] }}"
      run_once: true

    - name: Join MicroCeph cluster on secondary nodes
      command: "microceph cluster join {{ hostvars[groups['swarm'][0]]['node_tokens'][ansible_hostname] }}"
      register: join_result
      when:
        - inventory_hostname != groups['swarm'][0]
        - hostvars[groups['swarm'][0]]['node_tokens'] is defined
        - hostvars[groups['swarm'][0]]['node_tokens'][ansible_hostname] is defined
      failed_when:
        - join_result.rc != 0
        - "'already joined' not in join_result.stderr"
      changed_when: "'already joined' not in join_result.stderr"
